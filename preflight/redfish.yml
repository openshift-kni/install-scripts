---
- name: Redfish & Generate Configuration Files
  hosts: bmcs
  gather_facts: false
  tasks:
    - name: Redfish Gather MACs
      redfish_facts:
        category: Systems
        command: all
        baseuri: "{{ bmcip }}"
        username: "{{ bmcuser }}"
        password: "{{ bmcpassword }}"
      delegate_to: localhost
      register: result

    - name: Copy Results to Output File
      copy:
        content: "{{ result | to_nice_json }}"
        dest: "{{inventory_hostname}}.hwprofile.json"
      delegate_to: localhost

    - name: Add Additional Lines to Dynamic Host Inventory File
      shell: |
        echo domain={{ domain }}>>hosts
        echo cluster={{ cluster }}>>hosts
        echo ipmi_username={{ bmcuser }}>>hosts
        echo ipmi_password={{ bmcpassword }}>>hosts
      delegate_to: localhost
      run_once: True
     
    - name: DNS DHCP Scope Requirements
      shell: |
        if (getent hosts api.{{ cluster }}.{{ domain }}>/dev/null 2>&1); then apistat="Success"; apiip=`getent hosts api.{{ cluster }}.{{ domain }}|awk {'print $1'}`; else apistat="Failed"; apiip="Error"; fi
        if (getent hosts test.apps.{{ cluster }}.{{ domain }}>/dev/null 2>&1); then appstat="Success"; appip=`getent hosts test.apps.{{ cluster }}.{{ domain }}|awk {'print $1'}`; else appstat="Failed"; appip="Error"; fi
        if (getent hosts ns1.{{ cluster }}.{{ domain }}>/dev/null 2>&1); then nsstat="Success"; ns1ip=`getent hosts ns1.{{ cluster }}.{{ domain }}|awk {'print $1'}`; else nsstat="Failed"; ns1ip="Error"; fi
        cat << EOF >> dhcps
        
        Hostname                               MacAddress              IpAddress                  Interface                Status
        --------------------                   --------------------    --------------------   --------------------    --------------------
        api.{{ cluster }}.{{ domain }}          NA                      $apiip                    VIP                       $apistat
        *.apps.{{ cluster }}.{{ domain }}       NA                      $appip                    VIP                       $appstat
        ns1.{{ cluster }}.{{ domain }}          NA                      $ns1ip                    VIP                       $nsstat
        EOF
        echo apivip=$apiip>>hosts
        echo ingressvip=$appip>>hosts
        echo ns1vip=$ns1ip>>hosts
        echo '[masters]' >> hosts
      delegate_to: localhost
      run_once: True

    - name: Add Master Hosts Lines To Inventory and Perform DHCP/DNS Validations
      shell: |
        intip="Unassigned"
        macaddress=`jq -r '.ansible_facts.redfish_facts.nic.entries[0][1][]|select(.Description=="Integrated NIC 1 Port 1 Partition 1")|.PermanentMACAddress' {{inventory_hostname}}.hwprofile.json`
        extmacaddress=`jq -r '.ansible_facts.redfish_facts.nic.entries[0][1][]|select(.Description=="Integrated NIC 1 Port 2 Partition 1")|.PermanentMACAddress' {{inventory_hostname}}.hwprofile.json`
        dhcpip=`./check_dhcp.py -m $extmacaddress|grep Offered|cut -f2 -d:|sed "s/ //g"`
        extip=`getent hosts {{ inventory_hostname }}.{{ cluster }}.{{ domain }}|awk {'print $1'}`
        extnet=`/usr/bin/ipcalc -n "$(/usr/sbin/ip -o addr show|grep baremetal|grep -v inet6|awk {'print $4'})"|cut -f2 -d=`
        extcidr=`/usr/bin/ipcalc -p "$(/usr/sbin/ip -o addr show|grep baremetal|grep -v inet6|awk {'print $4'})"|cut -f2 -d=`
        dhcpipnet=`/usr/bin/ipcalc -n $dhcpip/$extcidr |cut -f2 -d=`
        extipnet=`/usr/bin/ipcalc -n $extip/$extcidr |cut -f2 -d=`
        if [ $dhcpip == $extip ] && [ $dhcpipnet == $extipnet ] && [ $extnet == $extipnet ]; then dnstat="Success"; else dnstat="Failed"; fi
        if (echo "{{ inventory_hostname }}"|grep -q master); then echo "{{ inventory_hostname }} name={{ inventory_hostname }} role=master ipmi_username={{ bmcuser }} ipmi_password={{ bmcpassword }} ipmi_address={{ bmcip }} mac=$macaddress disk=59">>hosts; fi
        if (echo "{{ inventory_hostname }}"|grep -q worker-0); then intip=`ip -f inet a show provisioning|sed -En -e 's/.*inet ([0-9.]+).*/\1/p'`; fi
        cat << EOF >> dhcps
        {{ inventory_hostname }}.{{ cluster }}.{{ domain }}  $extmacaddress  $extip  External  $dnstat
        {{ inventory_hostname }}.{{ cluster }}.{{ domain }}  $macaddress  $intip  Internal  Success
        EOF
      delegate_to: localhost

    - name: Refresh inventory to ensure new instances exist in inventory
      meta: refresh_inventory

- name: Power Cycle Off Masters
  hosts: masters
  gather_facts: false

  tasks:
    - name: Power Cycle Off Masters
      redfish_command:
        category: Systems
        command: PowerForceOff
        baseuri: "{{ ipmi_address }}"
        username: "{{ ipmi_username }}"
        password: "{{ ipmi_password }}"
      delegate_to: localhost
      ignore_errors: true
